import type { NextPage } from "next";
import Head from "next/head";
import { inferQueryOutput, trpc } from "../utils/trpc";
import React from "react";
import { useQueryClient } from "react-query";
import Link from "next/link";

type PostType = inferQueryOutput<"post.getById">;

const Posts: NextPage = () => {
  const queryClient = useQueryClient();
  const utils = trpc.useContext();
  const { data: self } = trpc.useQuery(["self.get"]);
  const { data: posts } = trpc.useQuery(["wall.getAll"]);
  const { mutate: createPost } = trpc.useMutation(["post.insert"], {
    onSuccess: () => {
      utils.invalidateQueries("wall.getAll");
    },
  });
  const { mutate: logout } = trpc.useMutation(["auth.logout"], {
    onSuccess: () => {
      sessionStorage.removeItem("access_token");
      sessionStorage.removeItem("refresh_token");
      utils.invalidateQueries("self.get");
      queryClient.clear();
    },
  });

  const [title, setTitle] = React.useState("");
  const [content, setContent] = React.useState("");
  const [isPrivate, setIsPrivate] = React.useState(false);

  return (
    <>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center h-screen p-4">
        <div className="flex flex-row justify-start content-center w-full">
          <div className="flex flex-col justify-center mr-8">
            <h1 className="text-2xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
              {self ? <>Posts</> : <span>Please Login</span>}
            </h1>
            <span>Add a post</span>
            <input
              className="m-2 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            />
            <input
              className="m-2 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Content"
              value={content}
              onChange={(e) => setContent(e.target.value)}
            />
            <div className="flex items-center">
              <input
                id="checked-checkbox"
                type="checkbox"
                value=""
                checked={isPrivate}
                className="w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                onChange={() => setIsPrivate((p) => !p)}
              />
              <label
                htmlFor="checked-checkbox"
                className="ml-2 text-sm font-medium text-gray-900"
              >
                Private
              </label>
            </div>
            <button
              disabled={!self}
              className={
                self
                  ? "my-2 m-2bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-1 px-4 border border-blue-500 hover:border-transparent rounded"
                  : "my-2 m-2bg-transparent text-gray-500  font-semibold  py-1 px-4 border  rounded"
              }
              onClick={() => createPost({ title, content, isPrivate })}
            >
              {self ? "Post" : "You must be logged in to post"}
            </button>
            {self ? (
              <button
                className="m-2bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-1 px-4 border border-blue-500 hover:border-transparent rounded"
                onClick={() => logout()}
              >
                Logout
              </button>
            ) : (
              <Link
                className="my-2 m-2bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-1 px-4 border border-blue-500 hover:border-transparent rounded"
                href={"/auth"}
              >
                Login
              </Link>
            )}
          </div>
          <div className="flex flex-col flex-wrap  max-h-screen">
            {posts?.map((post) => (
              <Post key={post.id} post={post} />
            ))}
          </div>
        </div>
      </main>
    </>
  );
};

const Post = ({ post }: { post: PostType }) => {
  const utils = trpc.useContext();
  const { mutate: deletePost } = trpc.useMutation(["post.deleteById"], {
    onSuccess: () => {
      utils.invalidateQueries("wall.getAll");
    },
  });

  return (
    <div className="max-w-sm rounded overflow-hidden shadow-lg m-4">
      <div className="px-6 py-4">
        <div className="font-bold text-xl mb-2">{post?.title}</div>
        <p className="text-gray-700 text-base">{post?.content}</p>
        <p className="text-gray-500 text-base">By: {post?.user.email}</p>
      </div>
      <div className="px-6 pt-4 pb-2">
        <span className="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">
          {post?.isPrivate ? "#private" : "#public"}
        </span>
        <span className="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">
          #hctechies
        </span>
      </div>
      <div className="flex flex-row justify-center">
        <button
          className=" m-2bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-1 mb-4 px-4 border border-blue-500 hover:border-transparent rounded"
          onClick={() => post && deletePost(post.id)}
        >
          Delete
        </button>
      </div>
    </div>
  );
};

export default Posts;
